@model UserManagementDemo.Models.ComboboxViewModel

<div x-data="reusableCombobox({
        id: '@Model.Id',
        itemsSourcePath: '@Model.ItemsSourcePath',
        valueProperty: '@Model.ValueProperty',
        displayProperty: '@Model.DisplayProperty', 
        selectedValuePath: '@Model.SelectedValuePath',
        placeholder: '@Model.Placeholder',
        onSelectCallback: '@Model.OnSelectCallback',
        isDisabled: '@Model.IsDisabled'
    })" 
     x-init="initialize()"
     class="dropdown position-relative">
    
    <input 
        type="text" 
        class="form-control" 
        :class="{ 'bg-light': isDisabled }"
        :placeholder="config.placeholder || 'Select...'"
        :disabled="isDisabled"
        x-model="searchTerm"
        x-on:focus="!isDisabled && (isOpen = true)"
        x-on:blur="setTimeout(() => isOpen = false, 200)"
        x-on:input="handleInput()"
        :value="displayValue"
        autocomplete="off" />
    
    <div class="dropdown-menu w-100" 
         :class="{ 'show': isOpen && items.length > 0 && !isDisabled }"
         x-transition>
        <template x-for="(item, index) in filteredItems" :key="index">
            <button 
                type="button"
                class="dropdown-item d-flex justify-content-between"
                x-on:click="selectItem(item)"
                :class="{ 'active': isItemSelected(item) }">
                <span x-text="getItemDisplay(item)"></span>
            </button>
        </template>
        <div class="dropdown-item text-muted" 
             x-show="filteredItems.length === 0 && searchTerm">
            No results found
        </div>
    </div>
</div>

<script>
	document.addEventListener('alpine:init', () => {
		// Reusable Combobox Component
		Alpine.data('reusableCombobox', (config) => ({
			config: config,
			searchTerm: '',
			isOpen: false,
			selectedItem: null,

			// Get items from parent scope
			get items() {
				const parent = this.getParentData();
				return this.getNestedProperty(parent, this.config.itemsSourcePath) || [];
			},

			// Check if combobox is disabled
			get isDisabled() {
				if (!this.config.isDisabled) return false;
				const parent = this.getParentData();
				return this.getNestedProperty(parent, this.config.isDisabled) || false;
			},

			// Filter items based on search
			get filteredItems() {
				if (!this.searchTerm) return this.items;

				const search = this.searchTerm.toLowerCase();
				return this.items.filter(item => {
					const displayValue = item[this.config.displayProperty]?.toString().toLowerCase() || '';
					const valueValue = item[this.config.valueProperty]?.toString().toLowerCase() || '';
					return displayValue.includes(search) || valueValue.includes(search);
				});
			},

			// Get display value for input
			get displayValue() {
				if (this.selectedItem) {
					return this.getItemDisplay(this.selectedItem);
				}
				return this.searchTerm;
			},

			// Initialize component
			initialize() {
				// Watch for changes in parent's selected value
				this.$watch(() => this.getSelectedValueFromParent(), (newValue) => {
					this.syncWithParent(newValue);
				});

				// Initial sync
				this.syncWithParent(this.getSelectedValueFromParent());
			},

			// Get parent Alpine data
			getParentData() {
				let el = this.$el.parentElement;
				while (el) {
					if (el._x_dataStack && el._x_dataStack.length > 0) {
						// Find the parent data that's not this combobox
						for (let i = el._x_dataStack.length - 1; i >= 0; i--) {
							const data = el._x_dataStack[i];
							if (data !== this && typeof data === 'object') {
								return data;
							}
						}
					}
					el = el.parentElement;
				}
				return {};
			},

			// Get nested property from object using dot notation
			getNestedProperty(obj, path) {
				return path.split('.').reduce((o, p) => o && o[p], obj);
			},

			// Set nested property in object using dot notation
			setNestedProperty(obj, path, value) {
				const keys = path.split('.');
				const lastKey = keys.pop();
				const target = keys.reduce((o, k) => o[k] = o[k] || {}, obj);
				target[lastKey] = value;
			},

			// Get selected value from parent scope
			getSelectedValueFromParent() {
				const parent = this.getParentData();
				return this.getNestedProperty(parent, this.config.selectedValuePath);
			},

			// Sync component with parent's selected value
			syncWithParent(selectedValue) {
				if (selectedValue) {
					const item = this.items.find(item => 
						item[this.config.valueProperty] === selectedValue
					);
					if (item) {
						this.selectedItem = item;
						this.searchTerm = '';
					} else {
						this.selectedItem = null;
					}
				} else {
					this.selectedItem = null;
					this.searchTerm = '';
				}
			},

			// Handle input changes
			handleInput() {
				if (this.isDisabled) return;

				this.isOpen = true;
				// Clear selection when typing
				if (this.searchTerm && this.selectedItem) {
					this.selectedItem = null;
					this.updateParentValue('');
				}
			},

			// Select an item
			selectItem(item) {
				if (this.isDisabled) return;

				this.selectedItem = item;
				this.searchTerm = '';
				this.isOpen = false;

				const selectedValue = item[this.config.valueProperty];
				this.updateParentValue(selectedValue);

				// Call parent callback if specified
				if (this.config.onSelectCallback) {
					const parent = this.getParentData();
					if (typeof parent[this.config.onSelectCallback] === 'function') {
						parent[this.config.onSelectCallback](item);
					}
				}
			},

			// Update parent's selected value
			updateParentValue(value) {
				const parent = this.getParentData();
				this.setNestedProperty(parent, this.config.selectedValuePath, value);
			},

			// Check if item is selected
			isItemSelected(item) {
				return this.selectedItem && 
					this.selectedItem[this.config.valueProperty] === item[this.config.valueProperty];
			},

			// Get display text for item
			getItemDisplay(item) {
				return `${item[this.config.displayProperty]} - ${item[this.config.valueProperty]}`;
			},

			// Reset component
			reset() {
				this.selectedItem = null;
				this.searchTerm = '';
				this.isOpen = false;
				this.updateParentValue('');
			}
		}));
	});
</script>
